
##### Source files #####

# Path to an ENSEMBL FASTA reference transcriptome file/URL to be used for read mapping (local, FTP or HTTP)

transcriptome_ref: "data/yeast/reference/reference_transcriptome.fa"

##### Conditional execution of pipeline #####

gpu_acceleration: False
quality_control: True
tombo: True
nanocompore: False
eligos2: False
xpore: False
mines: False
epinano: False
differr_nanopore_DRS: True

##### Individual rules configuration #####

get_transcriptome:
    threads: 1
    mem_mb: 1000
    opt: ""

ont_guppy:
    threads: 4
    mem_mb: 6000
    opt: "-c rna_r9.4.1_70bps_hac.cfg --records_per_fastq 0 --recursive --disable_pings --calib_detect --num_callers 4 --cpu_threads_per_caller 1"
    # example GPU options if using gpu_basecalling instead
    #opt: "-c rna_r9.4.1_70bps_hac.cfg --records_per_fastq 0 --recursive --disable_pings --calib_detect --num_callers 8 --gpu_runners_per_device 1 --device 'auto'"

merge_fastq:
    threads: 1
    mem_mb: 1000
    opt: "--remove_duplicates --min_len 100 --min_qual 7"

minimap2_index:
    threads: 1
    mem_mb: 1000
    opt: ""

minimap2_align:
    threads: 4
    mem_mb: 1000
    opt: "-a -L -x map-ont"
    # opt: "-a -L -x sr -p 0 -N 10"

pbt_alignmemt_filter:
    threads: 1
    mem_mb: 1000
    opt: "--skip_unmapped --skip_secondary --skip_supplementary --orientation '+' --min_read_len 100 --min_align_len 100 --min_mapq 10 --min_freq_identity 0.8"
    #opt: "--skip_unmapped --skip_secondary --skip_supplementary --orientation '+' --min_align_len 50 --min_mapq 5 --min_freq_identity 0.8"

# f5c_index:
#     threads: 4
#     mem_mb: 1000
#     opt: "--iop 4"
#
# f5c_eventalign:
#     threads: 4
#     mem_mb: 1000
#     opt: "-x laptop-low --print-read-names --scale-events --kmer-model resources/r9.4_70bps.u_to_t_rna.5mer.template.model"
#     #opt: "-x laptop-low --samples --print-read-names --scale-events --kmer-model resources/r9.4_70bps.u_to_t_rna.5mer.template.model"

# Nanopolish parameters

nanopolish_index:
    threads: 4
    mem_mb: 1000
    opt: ""

pbt_alignment_split:
    opt: "--index"
    n_chunks: 3 #### Can be increased to speed up nanopolish

nanopolish_eventalign:
    threads: 4
    mem_mb: 1000
    opt: " --samples --print-read-names --scale-events --signal-index" # Options required for nanocompore and xpore

nanopolish_eventalign_gather:
    threads: 1
    mem_mb: 1000
    opt: ""

# nnanocompore parameters

nanocompore_eventalign_collapse:
    threads: 4
    mem_mb: 1000
    opt: ""

nanocompore_sampcomp:
    threads: 4
    mem_mb: 1000
    opt: "--max_invalid_kmers_freq 0.1 --min_coverage 30 --downsample_high_coverage 5000 --min_ref_length 100 --comparison_methods GMM,KS --sequence_context 2 --sequence_context_weights harmonic --pvalue_thr 0.01 --logit"

# tombo parameters

tombo_preprocess:
    threads: 4
    mem_mb: 1000
    opt: ""

tombo_detect_modifications:
    threads: 4
    mem_mb: 1000
    opt: "--minimum-test-reads 50 --fishers-method-context 2 --statistic-type ks --store-p-value"

tombo_postprocess:
    threads: 1
    mem_mb: 1000
    opt:
        min_cov: 50
        p_val_lim: 0.01
        quantile_lim: 0.5
        min_distance: 9

# quality_control parameters

pycoQC:
    threads: 1
    mem_mb: 1000
    opt: "--skip_coverage_plot --filter_calibration --filter_duplicated --min_pass_len 100 --min_pass_qual 7"
